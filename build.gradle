import groovy.sql.Sql
import org.redline_rpm.header.RpmType

buildscript {
    ext{
        osPackageVersion = "3.4.0"
        kotlin_version = '1.2.41'
        requery_version = '1.5.1'
        sqlite_jdbc = '3.7.2'
        rxkotlin_version = '2.2.0'
        sqlDirPath = "src" + File.separator + "main" + File.separator + "Resources" + File.separator + "TestAppDbInit.sql"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven{
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "edu.sc.seis.gradle:launch4j:2.4.4"
        classpath group: 'org.jooq', name: 'jooq-meta-extensions', version: '3.11.2'
        classpath 'org.jooq:jooq-codegen:3.11.2'
        classpath 'org.xerial:sqlite-jdbc:3.7.2'
        classpath "com.netflix.nebula:gradle-ospackage-plugin:$osPackageVersion"
    }
}

plugins {
    id 'java'
    id 'nu.studer.jooq' version '3.0.1'
}

group 'org.wycliffeassociates.translationrecorder'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'edu.sc.seis.launch4j'
apply plugin: 'nebula.ospackage'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io'}
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://mvnrepository.com/artifac/'}
    maven { url  "https://dl.bintray.com/kotlin/exposed" }
    maven { url  "https://dl.bintray.com/dua3/public" }
}

allprojects {
    repositories {
        maven { url "https://jitpack.io" }
    }
}

configurations {
    sqllite
}

dependencies {
    compile 'com.jfoenix:jfoenix:8.0.4'
    compile "com.github.thomasnield:rxkotlinfx:2.2.2"
    compile "io.reactivex.rxjava2:rxkotlin:2.2.0"
    compile "no.tornado:tornadofx:1.7.16"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: "$sqlite_jdbc"
    compile "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
    compile 'org.jooq:jooq:3.11.2'
    jooqRuntime group: 'org.jooq', name: 'jooq-meta-extensions', version: '3.11.2'
    jooqRuntime 'org.xerial:sqlite-jdbc:3.7.2'
    sqllite 'org.xerial:sqlite-jdbc:3.7.2'
    compile "com.squareup.retrofit2:retrofit:2.0.0"
    compile "com.squareup.retrofit2:converter-moshi:2.0.0"
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile 'com.google.dagger:dagger:2.16'
    kapt 'com.google.dagger:dagger-compiler:2.16'
    testCompile "org.mockito:mockito-core:2.+"
    implementation 'com.github.WycliffeAssociates:8woc2018-common:dev-SNAPSHOT'
    kapt "io.requery:requery-processor:$requery_version"
    compile "com.squareup.retrofit2:retrofit:2.0.0"
    compile "com.squareup.retrofit2:converter-moshi:2.0.0"
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "no.tornado:tornadofx:1.7.16"
    compile 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    compile 'de.jensd:fontawesomefx-commons:9.1.2-jpms'
    compile 'de.jensd:fontawesomefx-materialicons:2.2.0-9.1.2-jpms'
    compile 'de.jensd:fontawesomefx-icons525:4.2.0-9.1.2-jpms'
    compile 'com.github.WycliffeAssociates:jdenticon-kotlin:-SNAPSHOT'
    compile 'com.github.afester.FranzXaver:Examples:0.1'
    compile "com.github.thomasnield:rxkotlinfx:2.2.2" // optional
    compile 'com.jfoenix:jfoenix:8.0.5' // Java 8
    testCompile "org.mockito:mockito-core:2.+"
    testCompile 'org.powermock:powermock-module-junit4:2.+'
    testCompile 'org.powermock:powermock-module-junit4-rule:2.+'
    testCompile 'org.powermock:powermock-api-mockito2:2.+'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

//////////////////////////////////// Custom Tasks ///////////////////////////////////////////
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task printVersionName{
    doLast {
        println getVersionName()
    }
}

task buildWinInstaller(type:Exec) {
    group 'Build'
    description 'Produces a Windows installer'

    workingDir "${projectDir}/src/main/resources"
    commandLine 'iscc',
            "/DversionNumber=${getVersionName()}" ,
            "/DoutputDir=${project.buildDir}/distributions/windows",
            "/DsrcDir=${project.buildDir}/distributions/windows",
            'setup.iss'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

task createDb {
    def driverName = 'org.sqlite.JDBC'
    Class.forName(driverName)
    def sql = Sql.newInstance('jdbc:sqlite:test.sqlite', "org.sqlite.JDBC")
    String[] text = new File(sqlDirPath).text.split(';')
    text.collect { it.trim() }.findAll { !it.isEmpty() && !it.startsWith("--") }.each {
        sql = Sql.newInstance('jdbc:sqlite:test.sqlite', "org.sqlite.JDBC")
        sql.execute(it)
        sql.close()
    }
}

////////////////////////////////////// Configure Plugins ///////////////////////////////////////////
jar {
    manifest { attributes 'Main-Class' : 'app.MainKt' }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

jooq {
    version = '3.11.2'
    edition = 'OSS'
    sample(sourceSets.main) {
        jdbc {
            driver = 'org.sqlite.JDBC'
            url = 'jdbc:sqlite:test.sqlite'
        }
        generator {
            database {
                name = 'org.jooq.meta.sqlite.SQLiteDatabase'
            }
            generate {
                pojos = true
                daos = true
            }

            target {
                packageName = 'jooq'
                directory = 'src/main/java'
            }
        }
    }
}

launch4j{
    mainClassName = 'app.MainKt'
    outputDir = 'distributions/windows'
    version = getVersionName()
    icon = "${projectDir}/icons/blue_desktop_icon.ico"
    outfile = "translationRecorder.exe"
    splashFileName = "${projectDir}/icons/splash-screen.bmp"
    companyName = "Wycliffe Associates"
    fileDescription = "executable"
    productName = "Translation Recorder"
    internalName = "translationRecorder"
    bundledJrePath = System.getenv("JRE_HOME")
}

ospackage {
    version = getVersionName()
    release = 1

    os = LINUX
    type = BINARY

    requires('openjdk-8-jre')
    into "/opt/translationRecorder"

    from(jar.outputs.files){
        into "/opt/translationRecorder"
    }

    from("src/main/resources/scripts/translationRecorder"){
        into "/opt/translationRecorder"
        fileMode = 0755
    }
}

buildDeb{
    directory("/opt/translationRecorder", 0755)
    link("/usr/bin/translationRecorder", "/opt/translationRecorder/translationRecorder")
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.sqllite.each { File file ->
    loader.addURL(file.toURL())
}

clean.doLast {
    project.file('src/main/java/jooq').deleteDir()
}
/////////////////////// Define Task Orders ///////////////////////////////
createExe.dependsOn build
buildWinInstaller.dependsOn createExe
generateSampleJooqSchemaSource.dependsOn createDb
compileKotlin.dependsOn generateSampleJooqSchemaSource
buildDeb.dependsOn jar